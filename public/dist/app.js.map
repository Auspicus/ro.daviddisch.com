{"version":3,"sources":["/Users/ddi/dev/me/tsp-ui/src/app.ts"],"sourcesContent":["namespace Graph {\n  export type Node = {\n    x: number;\n    y: number;\n  };\n\n  export type Worker = {\n    id: string;\n    location: Node;\n    speed: number;\n  };\n\n  export type Task = {\n    id: string;\n    location: Node;\n    loss: number;\n  };\n\n  export type Route = {\n    workerId: string;\n    tasks: Array<Task>;\n  };\n\n  export type Solution = {\n    id: string;\n    routes: Array<Route>;\n  };\n}\n\n/**\n * Distance from A - B in units.\n *\n * @param a\n * @param b\n * @returns\n */\nconst distance = (a: Graph.Node, b: Graph.Node): number => {\n  const dx2 = Math.pow(Math.abs(b.x - a.x), 2);\n  const dy2 = Math.pow(Math.abs(b.y - a.y), 2);\n  return Math.sqrt(dx2 + dy2);\n};\n\n/**\n * Loss over the route expressed in minutes.\n *\n * @param worker\n * @param route\n * @returns\n */\nconst loss = (worker: Graph.Worker, route: Graph.Route): number => {\n  let loss = 0;\n  let curr = worker.location;\n\n  route.tasks.forEach((t) => {\n    loss += distance(curr, t.location) / worker.speed + t.loss;\n    curr = t.location;\n  });\n\n  return loss;\n};\n\n/**\n * Compute the longest route for a solution expressed in minutes.\n *\n * @param workers\n * @param solution\n * @returns\n */\nconst longestRoute = (\n  workers: Array<Graph.Worker>,\n  solution: Graph.Solution\n): number => {\n  const longest = solution.routes.sort(\n    (a, b) =>\n      loss(workers.find((w) => w.id === b.workerId)!, b) -\n      loss(workers.find((w) => w.id === a.workerId)!, a)\n  )?.[0];\n  const time = loss(workers.find((w) => w.id === longest.workerId)!, longest);\n  return time;\n};\n\nconst permutations = <T>(xs: Array<T>): Array<Array<T>> => {\n  const ret: Array<Array<T>> = [];\n\n  for (let i = 0; i < xs.length; i = i + 1) {\n    const rest = permutations(xs.slice(0, i).concat(xs.slice(i + 1)));\n\n    if (!rest.length) {\n      ret.push([xs[i]]);\n    } else {\n      for (let j = 0; j < rest.length; j = j + 1) {\n        ret.push([xs[i]].concat(rest[j]));\n      }\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Solve for lowest overall service time in minutes.\n *\n * @param workers\n * @param tasks\n * @param config\n * @returns\n */\nconst solve = (\n  workers: Array<Graph.Worker>,\n  tasks: Array<Graph.Task>\n  //   config: Config\n): Graph.Solution => {\n  const workerCopy = [...workers];\n  const tasksCopy = [...tasks];\n\n  let s: Graph.Solution = {\n    id: \"\",\n    routes: [],\n  };\n\n  const getWorkerTasks = (id: string): Array<Graph.Task> => {\n    return s.routes.find((r) => r.workerId === id)?.tasks ?? [];\n  };\n\n  const getRouteWithTask = (id: string, task: Graph.Task): Graph.Route => {\n    return { workerId: id, tasks: [...getWorkerTasks(id), task] };\n  };\n\n  const addTaskToRoute = (id: string, task: Graph.Task): void => {\n    s = {\n      id: \"\",\n      routes: [\n        ...s.routes.filter((r) => r.workerId !== id),\n        getRouteWithTask(id, task),\n      ],\n    };\n  };\n\n  for (let i = 0; i < tasksCopy.length; i++) {\n    let bestLoss = Number.MAX_VALUE;\n    let wid: number | null = null;\n\n    for (let j = 0; j < workerCopy.length; j++) {\n      const thisLoss = loss(\n        workerCopy[j],\n        getRouteWithTask(workerCopy[j].id, tasksCopy[i])\n      );\n\n      if (thisLoss < bestLoss) {\n        wid = j;\n        bestLoss = thisLoss;\n      }\n    }\n\n    if (wid !== null) {\n      addTaskToRoute(workerCopy[wid].id, tasksCopy[i]);\n    }\n  }\n\n  return { ...s, id: crypto.randomUUID() };\n};\n\nconst uniqBy = (arr, predicate) => {\n  const cb = typeof predicate === 'function' ? predicate : (o) => o[predicate];\n\n  return [...arr.reduce((map, item) => {\n    const key = (item === null || item === undefined) ?\n      item : cb(item);\n\n    map.has(key) || map.set(key, item);\n\n    return map;\n  }, new Map()).values()];\n};\n\nconst start = () => {\n  let mode: \"worker\" | \"task\" = \"task\";\n  const $modeSelect = document.querySelector(\"#mode\");\n  const $map = document.querySelector(\"#map\");\n  const $solveButton = document.querySelector(\"#solve\");\n  const $solutionList = document.querySelector('#solutions');\n  let sortedSolutions: Array<Graph.Solution> = [];\n\n  const addTask = (node: Graph.Task) => {\n    const tasks = getTasks()\n    if (tasks.length >= 7) return\n    const $node = document.createElementNS(\n      \"http://www.w3.org/2000/svg\",\n      \"circle\"\n    );\n    $node.setAttribute(\"data-id\", node.id);\n    $node.setAttribute(\"data-x\", `${node.location.x}`);\n    $node.setAttribute(\"data-y\", `${node.location.y}`);\n    $node.setAttribute(\"cx\", `${node.location.x}`);\n    $node.setAttribute(\"cy\", `${node.location.y}`);\n    $node.setAttribute(\"r\", \"3\");\n    $node.setAttribute(\"fill\", \"blue\");\n    $node.classList.add(\"task\");\n    $map?.appendChild($node);\n  };\n\n  const addWorker = (node: Graph.Worker) => {\n    const workers = getWorkers()\n    if (workers.length >= 3) return\n    const $node = document.createElementNS(\n      \"http://www.w3.org/2000/svg\",\n      \"circle\"\n    );\n    $node.setAttribute(\"data-id\", node.id);\n    $node.setAttribute(\"data-x\", `${node.location.x}`);\n    $node.setAttribute(\"data-y\", `${node.location.y}`);\n    $node.setAttribute(\"cx\", `${node.location.x}`);\n    $node.setAttribute(\"cy\", `${node.location.y}`);\n    $node.setAttribute(\"r\", \"3\");\n    if (workers.length === 0) {\n      $node.setAttribute(\"fill\", \"yellow\");\n    }\n    if (workers.length === 1) {\n      $node.setAttribute(\"fill\", \"green\");\n    }\n    if (workers.length === 2) {\n      $node.setAttribute(\"fill\", \"orange\");\n    }\n    $node.classList.add(\"worker\");\n    $map?.appendChild($node);\n  };\n\n  const addRoute = (route: Graph.Route) => {\n    const $workers = Array.from(\n      $map?.querySelectorAll(\".worker\") ?? []\n    )\n    const workers: Array<Graph.Worker> = getWorkers();\n\n    const $node = document.createElementNS(\n      \"http://www.w3.org/2000/svg\",\n      \"path\"\n    );\n    const worker = workers.find((w) => w.id === route.workerId)!;\n    const $worker = $workers.find(($w) => $w.getAttribute('data-id') === route.workerId)\n    $node.setAttribute(\n      \"d\",\n      `M ${worker.location.x} ${worker.location.y} ${route.tasks\n        .map((t) => `L ${t.location.x} ${t.location.y}`)\n        .join(\" \")}`\n    );\n    $node.setAttribute(\"fill\", \"transparent\");\n    $node.setAttribute(\"stroke\", $worker?.getAttribute('fill') ?? 'white');\n    $node.setAttribute(\"stroke-width\", \"1\");\n    $map?.prepend($node);\n  };\n\n  const getWorkers = () => {\n    return Array.from(\n      $map?.querySelectorAll(\".worker\") ?? []\n    ).map((w) => ({\n      id: w.getAttribute(\"data-id\") ?? \"\",\n      location: {\n        x: parseInt(w.getAttribute(\"data-x\") ?? \"\"),\n        y: parseInt(w.getAttribute(\"data-y\") ?? \"\"),\n      },\n      speed: 5,\n    }));\n  }\n\n  const getTasks = () => {\n    return Array.from(\n      $map?.querySelectorAll(\".task\") ?? []\n    ).map((t) => ({\n      id: t.getAttribute(\"data-id\") ?? \"\",\n      location: {\n        x: parseInt(t.getAttribute(\"data-x\") ?? \"\"),\n        y: parseInt(t.getAttribute(\"data-y\") ?? \"\"),\n      },\n      loss: 1,\n    }));\n  }\n\n  const removeAllRoutes = () => {\n    $map?.querySelectorAll(\"path\").forEach((c) => {\n      $map.removeChild(c);\n    });\n  };\n\n  const renderSolution = (s: Graph.Solution) => {\n    removeAllRoutes();\n    s.routes.forEach((r) => {\n      addRoute(r);\n    });\n  };\n\n  const renderSolutionList = () => {\n    document.querySelectorAll('.solution-button').forEach((b) => b.remove())\n    const $elements: Array<Node> = []\n    const workers = getWorkers();\n    [0, Math.floor(sortedSolutions.length / 2), sortedSolutions.length - 1].forEach((i) => {\n      const s = sortedSolutions[i]\n      const $element = document.createElement('li')\n      $element.innerText = `(${longestRoute(workers, s).toFixed(1)} min.) ${s.id.slice(0, 8)}..`\n      $element.setAttribute('data-idx', `${i}`)\n      $element.classList.add('solution-button')\n      $element.addEventListener('click', () => {\n        renderSolution(sortedSolutions[i])\n      })\n      $elements.push($element)\n    })\n    $solutionList?.append(...$elements)\n  }\n\n  $map?.addEventListener(\"click\", (e: any) => {\n    const x = e.layerX;\n    const y = e.layerY;\n    const id = crypto.randomUUID();\n\n    if (mode === \"task\") {\n      addTask({ id, location: { x, y }, loss: 1 });\n    } else {\n      addWorker({ id, location: { x, y }, speed: 5 });\n    }\n  });\n\n  $modeSelect?.addEventListener(\"change\", (e: any) => {\n    mode = e.target.value;\n  });\n\n  $solveButton?.addEventListener(\"click\", (e: any) => {\n    const workers = getWorkers()\n    const tasks = getTasks()\n    const pw = permutations(workers);\n    const pt = permutations(tasks);\n\n    const allSolutions: Array<Graph.Solution> = [];\n    for (let i = 0; i < pw.length; i++) {\n      for (let j = 0; j < pt.length; j++) {\n        allSolutions.push(solve(pw[i], pt[j]));\n      }\n    }\n    sortedSolutions = uniqBy(allSolutions.sort(\n      (a, b) => longestRoute(workers, a) - longestRoute(workers, b)\n    ), (s) => longestRoute(workers, s));\n    renderSolution(sortedSolutions?.[0]);\n    renderSolutionList();\n  });\n};\n\naddEventListener(\"DOMContentLoaded\", () => {\n  start();\n});\n"],"names":[],"mappings":"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"}